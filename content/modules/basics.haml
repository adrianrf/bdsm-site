.breadcrumbs
  %a{ :href => "/" }
    Documentation
  &nbsp;>&nbsp;
  %a{ :href => "/modules/" }
    Modules
  &nbsp;>&nbsp;
  %a{ :href => "/modules/basics/" }
    Basics
  %hr

%h1
  Basics

%h2
  Description
%p
  When you write an extension, you'll invariably find yourself calling BDSM modules to take advantage of their
  pre-written functionality, which you can readily command via a clean, uncluttered DSL-formatted API - greatly accelerating your development of tremblingly-powerful system scripts.
%p
  If you're a programmer, you'll immediately recognize that Modules ache to be treated like the rest of your favorite programming language's standard libraries: they sit patiently off-stage, consuming no run-time resources, awaiting the chance to please you whenever and however you wish. At a moment's whim, you simply command the loading of a given library, then start directing its full repertoire of behaviors to whatever end you desire. Business, or pleasure? You're in total command; everyone in the retinue knows it, and everyone loves it...
%p
  Modules are grouped by language.

%h2
  Languages
%p
  Now that you have a grasp of modules, you may proceed to the individual
  language modules documentation pages.
  %ul
    %li
      %a{:href => "/modules/shell"} Shell Modules (Default)
    %li
      %a{:href => "/modules/c"} C Modules
    %li
      %a{:href => "/modules/ruby"} Ruby Modules
    %li
      %a{:href => "/modules/perl"} Perl Modules
    %li
      %a{:href => "/modules/python"} Python Modules


